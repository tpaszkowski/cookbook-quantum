<%= node["quantum"]["custom_template_banner"] %>

[DEFAULT]
# Default log level is INFO
# verbose and debug has the same result.
# One of them will set DEBUG log level output
debug = <%= node["quantum"]["debug"] %>
verbose =  <%= node["quantum"]["verbose"] %>

# Where to store Quantum state files.  This directory must be writable by the
# user executing the agent.
state_path = <%= node["quantum"]["state_path"] %>

# log_format = %(asctime)s %(levelname)8s [%(name)s] %(message)s
# log_date_format = %Y-%m-%d %H:%M:%S

# use_syslog                           -> syslog
# log_file and log_dir                 -> log_dir/log_file
# (not log_file) and log_dir           -> log_dir/{binary_name}.log
# use_stderr                           -> stderr
# (not user_stderr) and (not log_file) -> stdout
# publish_errors                       -> notification system

# use_syslog = False
# syslog_log_facility = LOG_USER

# use_stderr = True
# log_file =
# log_dir =

# publish_errors = False

# Address to bind the API server
<% "bind_host=@bind_address" if @bind_address %>

# Port the bind the API server to
<% "bind_port=@bind_port" if @bind_port %>

# Path to the extensions.  Note that this can be a colon-separated list of
# paths.  For example:
# api_extensions_path = extensions:/path/to/more/extensions:/even/more/extensions
# The __path__ of quantum.extensions is appended to this, so if your
# extensions are in there you don't need to specify them here
# api_extensions_path =

# Quantum plugin provider module
core_plugin = <%= node["quantum"]["core_plugin"] %>

# Advanced service modules
# service_plugins =

# Paste configuration file
api_paste_config =/etc/quantum/api-paste.ini

# The strategy to be used for auth.
# Supported values are 'keystone'(default), 'noauth'.
auth_strategy =  <%= node["quantum"]["auth_strategy"] %>

# Base MAC address. The first 3 octets will remain unchanged. If the
# 4h octet is not 00, it will also used. The others will be
# randomly generated.
# 3 octet
# base_mac = fa:16:3e:00:00:00
# 4 octet
# base_mac = fa:16:3e:4f:00:00
base_mac = <%= node["quantum"]["base_mac"] %>

# Maximum amount of retries to generate a unique MAC address
mac_generation_retries =  <%= node["quantum"]["mac_generation_retries"] %>

# DHCP Lease duration (in seconds)
dhcp_lease_duration = <%= node["quantum"]["dhcp_lease_duration"] %>

# Allow sending resource operation notification to DHCP agent
dhcp_agent_notification = <%= node["quantum"]["dhcp_agent_notification"] %>

# Enable or disable bulk create/update/delete operations
allow_bulk =  <%= node["quantum"]["allow_bulk"] %>
# Enable or disable pagination
allow_pagination = <%= node["quantum"]["allow_pagination"] %>
# Enable or disable sorting
allow_sorting = <%= node["quantum"]["allow_sorting"] %>
# Enable or disable overlapping IPs for subnets
# Attention: the following parameter MUST be set to False if Quantum is
# being used in conjunction with nova security groups and/or metadata service.
allow_overlapping_ips = <%= node["quantum"]["allow_overlapping_ips"] %>
# Ensure that configured gateway is on subnet
force_gateway_on_subnet = <%= node["quantum"]["force_gateway_on_subnet"] %>


# RPC configuration options. Defined in rpc __init__
# The messaging module to use, defaults to kombu.
rpc_backend = <%= node["quantum"]["rpc_backend"] %>
# Size of RPC thread pool
rpc_thread_pool_size = <%= node["quantum"]["rpc_backend"] %>
# Size of RPC connection pool
rpc_conn_pool_size = <%= node["quantum"]["rpc_conn_pool_size"] %>
# Seconds to wait for a response from call or multicall
rpc_response_timeout = <%= node["quantum"]["rpc_response_timeout"] %>
# Seconds to wait before a cast expires (TTL). Only supported by impl_zmq.
rpc_cast_timeout = <%= node["quantum"]["rpc_cast_timeout"] %>
# Modules of exceptions that are permitted to be recreated
# upon receiving exception data from an rpc call.
allowed_rpc_exception_modules = <%= node["quantum"]["allowed_rpc_exception_modules"] %>
# AMQP exchange to connect to if using RabbitMQ or QPID
control_exchange = <%= node["quantum"]["control_exchange"] %>

# If passed, use a fake RabbitMQ provider
fake_rabbit = <%= node["quantum"]["fake_rabbit"] %>

# Configuration options if sending notifications via kombu rpc (these are
# the defaults)
# SSL version to use (valid only if SSL enabled)
# kombu_ssl_version =
# SSL key file (valid only if SSL enabled)
# kombu_ssl_keyfile =
# SSL cert file (valid only if SSL enabled)
# kombu_ssl_certfile =
# SSL certification authority file (valid only if SSL enabled)'
# kombu_ssl_ca_certs =
# IP address of the RabbitMQ installation
rabbit_host = <%= node["quantum"]["rabbit_host"] %>
# Password of the RabbitMQ server
rabbit_password = <%= node["quantum"]["rabbit_password"] %>
# Port where RabbitMQ server is running/listening
rabbit_port = <%= node["quantum"]["rabbit_port"] %>
# User ID used for RabbitMQ connections
rabbit_userid = <%= node["quantum"]["rabbit_userid"] %>
# Location of a virtual RabbitMQ installation.
rabbit_virtual_host = <%= node["quantum"]["rabbit_virtual_host"] %>
# Maximum retries with trying to connect to RabbitMQ
# (the default of 0 implies an infinite retry count)
rabbit_max_retries = <%= node["quantum"]["rabbit_max_retries"] %>
# RabbitMQ connection retry interval
rabbit_retry_interval = <%= node["quantum"]["rabbit_retry_interval"] %>

# QPID
# rpc_backend=quantum.openstack.common.rpc.impl_qpid
# Qpid broker hostname
# qpid_hostname = localhost
# Qpid broker port
# qpid_port = 5672
# Username for qpid connection
# qpid_username = ''
# Password for qpid connection
# qpid_password = ''
# Space separated list of SASL mechanisms to use for auth
# qpid_sasl_mechanisms = ''
# Seconds between connection keepalive heartbeats
# qpid_heartbeat = 60
# Transport to use, either 'tcp' or 'ssl'
# qpid_protocol = tcp
# Disable Nagle algorithm
# qpid_tcp_nodelay = True

# ZMQ
# rpc_backend=quantum.openstack.common.rpc.impl_zmq
# ZeroMQ bind address. Should be a wildcard (*), an ethernet interface, or IP.
# The "host" option should point or resolve to this address.
# rpc_zmq_bind_address = *

# ============ Notification System Options =====================

# Notifications can be sent when network/subnet/port are create, updated or deleted.
# There are three methods of sending notifications: logging (via the
# log_file directive), rpc (via a message queue) and
# noop (no notifications sent, the default)

# Notification_driver can be defined multiple times
# Do nothing driver
# notification_driver = quantum.openstack.common.notifier.no_op_notifier
# Logging driver
# notification_driver = quantum.openstack.common.notifier.log_notifier
# RPC driver. DHCP agents needs it.
notification_driver = <%= node["quantum"]["notification_driver"] %>

# default_notification_level is used to form actual topic name(s) or to set logging level
default_notification_level = <%= node["quantum"]["default_notification_level"] %>

# default_publisher_id is a part of the notification payload
# host = myhost.com
default_publisher_id = <%= node["quantum"]["default_publisher_id"] %>

# Defined in rpc_notifier, can be comma separated values.
# The actual topic names will be %s.%(default_notification_level)s
notification_topics = <%= node["quantum"]["notification_topics"] %>

# Default maximum number of items returned in a single response,
# value == infinite and value < 0 means no max limit, and value must
# greater than 0. If the number of items requested is greater than
# pagination_max_limit, server will just return pagination_max_limit
# of number of items.
pagination_max_limit = <%= node["quantum"]["pagination_max_limit"] %>

# Maximum number of DNS nameservers per subnet
max_dns_nameservers = <%= node["quantum"]["max_dns_nameservers"] %>

# Maximum number of host routes per subnet
max_subnet_host_routes = <%= node["quantum"]["max_subnet_host_routes"] %>

# Maximum number of fixed ips per port
max_fixed_ips_per_port = <%= node["quantum"]["max_fixed_ips_per_port"] %>

# =========== items for agent management extension =============
# Seconds to regard the agent as down.
agent_down_time = <%= node["quantum"]["agent_down_time"] %>
# ===========  end of items for agent management extension =====

# =========== items for agent scheduler extension =============
# Driver to use for scheduling network to DHCP agent
network_scheduler_driver = <%= node["quantum"]["network_scheduler_driver"] %>
# Driver to use for scheduling router to a default L3 agent
router_scheduler_driver = <%= node["quantum"]["router_scheduler_driver"] %>

# Allow auto scheduling networks to DHCP agent. It will schedule non-hosted
# networks to first DHCP agent which sends get_active_networks message to
# quantum server
network_auto_schedule = <%= node["quantum"]["network_auto_schedule"] %>

# Allow auto scheduling routers to L3 agent. It will schedule non-hosted
# routers to first L3 agent which sends sync_routers message to quantum server
router_auto_schedule = <%= node["quantum"]["router_auto_schedule"] %>
# ===========  end of items for agent scheduler extension =====

[QUOTAS]
# resource name(s) that are supported in quota features
quota_items = <%= node["quantum"]["quotas"]["quota_items"].keys().join(",") %>

# default number of resource allowed per tenant, minus for unlimited
default_quota = <%= node["quantum"]["quotas"]["default_quota"] %>

# number of networks allowed per tenant, and minus means unlimited
quota_network = <%= node["quantum"]["quotas"]["quota_items"]["network"] %>

# number of subnets allowed per tenant, and minus means unlimited
quota_subnet = <%= node["quantum"]["quotas"]["quota_items"]["subnet"] %>

# number of ports allowed per tenant, and minus means unlimited
quota_port = <%= node["quantum"]["quotas"]["quota_items"]["port"] %>

# default driver to use for quota checks
quota_driver = <%= node["quantum"]["quotas"]["driver"] %>

[DEFAULT_SERVICETYPE]
# Description of the default service type (optional)
# description = "default service type"
# Enter a service definition line for each advanced service provided
# by the default service type.
# Each service definition should be in the following format:
# <service>:<plugin>[:driver]

[AGENT]
# Use "sudo quantum-rootwrap /etc/quantum/rootwrap.conf" to use the real
# root filter facility.
# Change to "sudo" to skip the filtering and just run the comand directly
root_helper = <%= node["quantum"]["agent"]["root_helper"] %>

# =========== items for agent management extension =============
# seconds between nodes reporting state to server, should be less than
# agent_down_time
report_interval = <%= node["quantum"]["agent"]["report_interval"] %>

# ===========  end of items for agent management extension =====

<% if @identity_endpoint %>
[keystone_authtoken]
auth_host = <%= @identity_endpoint.host %>
auth_port = <%= @identity_endpoint.port %>
auth_protocol = <%= @identity_endpoint.scheme %>
admin_tenant_name = <%= node["quantum"]["service_tenant_name"] %>
admin_user = <%= node["quantum"]["service_user"] %>
admin_password = <%= @service_pass %>
signing_dir = <%= node["quantum"]["server"]["auth"]["cache_dir"] %>
<% end %>
